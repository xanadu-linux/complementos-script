#!/usr/bin/env bash
# Made by Sinfallas <sinfallas@yahoo.com>
# Licence: GPL-2
LC_ALL=C
source /usr/bin/variables
rootyad

function ftrap () {
	rm -f /run/$(basename $0).pid
	rm -f /tmp/xan*
}

trap "ftrap; exit" 0 1 2 3 15
echo "$BASHPID" > /run/$(basename $0).pid

optimizacion_1

lock="/run/tor.lock"
lock3="/run/mirouter.lock"
toripv6="/etc/sysctl.d/70-tor.conf"
persistencia="/usr/bin/persistencia"
TOR_EXCLUDE="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"
TOR_UID="debian-tor"
TOR_PORT="9040"
cantidadram='--window-icon=/usr/share/icons/post-install.png --text="Debe tener un equipo con 2 Gb de RAM o mas para instalar este software."'
seguro='--window-icon=/usr/share/icons/post-install.png --text="¿Esta seguro de querer instalar este software?"'
bienvenida="Bienvenido a Xanadu GNU/Linux $(cat /etc/os-release | grep 'VERSION=' | cut -c 10-14)"
textoseguridad="Marque las opciones que usted quiere activar. Los servicios se activaran con sus configuraciones por defecto, es necesario que el usuario las modifique de acuerdo a sus necesidades."
textoadicionales="texto de adicionales"
textopost="texto de post-instalacion"
textotor="tor"
textomain="Escoja la pestaña para ver las opciones"
wifitor="wifi tor"
pest1="Bienvenida"
pest2="Adicionales"
pest3="Seguridad"
pest4="Tor"
pest5="Wifi Tor"
num="12346"
titulo="Complementario"
mimain="yad --sticky --fixed --center --notebook --height=560 --width=665 --image-on-top --title="$titulo" --key=$num --button="Aceptar:0" --button="Salir:1""
mitab="yad --plug=$num"
ad1="Gestionar Firewall"
ad2="Como activar la persistencia"
ad3="Activar persistencia automaticamente"
ad4="Reparar Hora"
ad5="Fillzero"
ad6="Iniciar Compton"
ad7="Detener Compton"
ad8="Ddclone"
pos1="Instalar Recomendados"
pos2="Instalar KDE"
pos3="Instalar GNOME"
pos4="Instalar XFCE"
pos5="Instalar Enlightenment"
pos6="Instalar Xanadu-Accessibility"
pos7="Instalar WINE"
pos8="Instalar driver ATI"
pos9="Instalar driver NVIDIA"
pos10="Instalar Xanadu-low"
pos11="Instalar HEADERS"
pos12="Instalar HPLIP-GUI"
pos13="Instalar Laptop-Mode-Tools"
pos14="Actualizar"
seg1="Activar AIDE"
seg2="Activar Fail2ban"
seg3="Activar PSAD"
seg4="Activar NTP"
seg5="Activar todos"

# poner el if que detecta si hay menos de 512 como una notificacion
if (( $memoria < 512000 )); then
	$advertencia --text="Se ha detectado poca RAM en su ordenador, se recomienda instalar el paquete xanadu-low para obtener ciertos programas mas adecuados a su equipo."
fi

function progress_2 () {
	$progreso --progress-text="Instalando Software, esto proceso puede tomar varios minutos, por favor espere" --title="Instalando"
}

function progress_limpiar_2 () {
	$progreso --progress-text="Realizando limpieza" --title="LIMPIEZA"
}

function headers_1 () {
	if [[ $(arch) = x86_64 ]] || [[ $(arch) = amd64 ]]; then
		$update
		$insta linux-headers-siduction-amd64
	else
		$update
		$insta linux-headers-siduction-686
	fi
}

function apparmor_1 () {
	$update
	$insta lightdm-gtk-greeter-settings grub-customizer icedove camorama
	if (( $memoria > 4096000 )); then
		$insta preload
	fi
}

function espera () {
	sleep 30 | $progreso --progress-text="Iniciando tor, por favor espere" --title="Tor"
}

function iptables_tor () {
	iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN
	iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
	iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 53
	iptables -t nat -A OUTPUT -p udp -m owner --uid-owner $TOR_UID -m udp --dport 53 -j REDIRECT --to-ports 53
	iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports $TOR_PORT
	iptables -t nat -A OUTPUT -p udp -d 10.192.0.0/10 -j REDIRECT --to-ports $TOR_PORT
	for NET in $TOR_EXCLUDE 127.0.0.0/9 127.128.0.0/10; do
		iptables -t nat -A OUTPUT -d $NET -j RETURN
	done
	iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TOR_PORT
	iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports $TOR_PORT
	iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports $TOR_PORT
	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	for NET in $TOR_EXCLUDE 127.0.0.0/8; do
		iptables -A OUTPUT -d $NET -j ACCEPT
	done
	iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT
	iptables -A OUTPUT -j REJECT
	iptables -A INPUT -p udp -j DROP
	iptables -A OUTPUT -p udp -j DROP
}

function tor_1 () {
	echo "Comienza el arranque de tor" > "$lock"
	mkdir -p /var/log/tor
	chown $TOR_UID:$TOR_UID /var/log/tor
	chmod 765 /var/log/tor
	for i in $miswap; do
		swapoff $i
	done
	echo "Se apagan las particiones swap" >> "$lock"
	killall -q x-www-browser chrome dropbox iceweasel skype icedove thunderbird firefox chromium xchat transmission deluge pidgin pidgin.orig
	limpiar_1
	echo "net.ipv6.conf.all.disable_ipv6 = 1" > "$toripv6"
	echo "net.ipv6.conf.default.disable_ipv6 = 1" >> "$toripv6"
	sysctl -p > /dev/null
	echo "Se ejecuta la funcion limpiar" >> "$lock"
	mv -f /home/"$quien"/.mozilla /home/"$quien"/.mozilla.bak
	cp -f /etc/firefox/prefs.tor /etc/firefox/prefs.js
	echo "Se cambian las configuraciones de firefox" >> "$lock"
	iptables-save > /etc/network/iptables.rules
	iptables_clean
	echo "Se limpian las reglas de iptables" >> "$lock"
	iptables_tor
	echo "Se bloquea el trafico udp" >> "$lock"
	systemctl stop ssh
	systemctl stop ntp
	systemctl stop cups
	systemctl stop cups-browsed
	systemctl stop minissdpd
	systemctl stop exim4
	echo "Se detienen servicios innecesarios" >> "$lock"
	aa-exec tor -f /etc/tor/torrc
	echo "Se inicia el demonio tor" >> "$lock"
	systemctl start privoxy
	echo "Se inicia el demonio privoxy" >> "$lock"
	killall dnsmasq
	dnsmasq
	echo "Se reinicia el demonio dnsmasq" >> "$lock"
	tsocks -on
	echo "Se inicia tsocks" >> "$lock"
	systemctl start memlockd
	echo "Se inicia memlockd" >> "$lock"

if [[ -f "$lock" ]]; then
	$errores --window-icon=/usr/share/icons/tor-icon.png --text="Tor ya se esta ejecutando."
else
	$advertencia --window-icon=/usr/share/icons/tor-icon.png --timeout=10 --text="TOR ayuda a proteger su informacion al navegar por la red, sin embargo puede dejar rastros en su equipo. Espere mientras se inicia TOR se le notificara al completarse la tarea."
	tor_1
	espera
	yad --window-icon=/usr/share/icons/tor-icon.png --timeout=30 --skip-taskbar --button=ACEPTAR:1 --title="FINALIZADO" --fixed --center --text-align=fill --borders=6 --text="Inicio completado. Si utiliza un navegador diferente de Firefox, introduzca la siguiente configuración de PROXY en su navegador: localhost (o el ip del equipo) puerto 8118 (9151 para socks) y localhost (o el ip del equipo) puerto 9050 para las otras aplicaciones que usen socks."
	firefox https://check.torproject.org/
fi
}

function tor_0 () {
	echo "Comienza el proceso para detener tor" >> "$lock"	
	limpiar_1
	echo "net.ipv6.conf.all.disable_ipv6 = 0" > "$toripv6"
	echo "net.ipv6.conf.default.disable_ipv6 = 0" >> "$toripv6"
	sysctl -p > /dev/null
	rm -f "$toripv6"
	echo "Se ejecuta la funcion limpiar" >> "$lock"
	iptables_clean
	iptables-restore < /etc/network/iptables.rules
	rm -f /etc/network/iptables.rules
	echo "Se limpian las reglas de iptables" >> "$lock"
	rm -rf /home/"$quien"/.mozilla
	mv -f /home/"$quien"/.mozilla.bak /home/"$quien"/.mozilla
	cp -f /etc/firefox/prefs.js.ori /etc/firefox/prefs.js
	echo "Se restauran las configuraciones de firefox" >> "$lock"
	systemctl stop privoxy
	echo "Se detiene el demonio privoxy" >> "$lock"
	killall tor
	echo "Se detiene el demonio tor" >> "$lock"
	killall dnsmasq
	dnsmasq
	echo "Se reinicia el demonio dnsmasq" >> "$lock"
	systemctl stop memlockd
	echo "Se detiene memlockd" >> "$lock"
	tsocks -off
	echo "Se detiene tsocks" >> "$lock"
	rm -f /run/tor/tor.pid
	rm -f /run/privoxy.pid
	rm -f /run/memlockd.pid
	echo "Se eliminan los pid restantes" >> "$lock"
	for j in $miswap; do
		swapon -p 25 -f $j
	done
	echo "Se activan las particiones swap" >> "$lock"
	rm -f "$lock"

if [[ -f "$lock" ]]; then
	tor_0
	$final --window-icon=/usr/share/icons/tor-icon.png --text="Servicio finalizado exitosamente."
else
	$errores --window-icon=/usr/share/icons/tor-icon.png --text="Tor no se esta ejecutando."
fi
}

function xclamav () {
	$advertencia --window-icon=clamtk --timeout=5 --text="La actualización de base de firmas de virus retardara el inicio, por favor espere, presione aceptar para continuar."
	mkdir -p /root/.clamtk/db
	mkdir -p /tmp/clamav
	mkdir -p /var/log/clamav
	touch /var/log/clamav/freshclam.log
	touch /var/log/clamav/clamav.log
	chmod 777 /tmp/clamav
	chmod 600 /var/log/freshclam.log
	chmod 600 /var/log/clamav/clamav.log
	chown clamav /var/log/freshclam.log
	chown clamav /var/log/clamav/clamav.log
	sed -i 's_UpdateLogFile_#UpdateLogFile_g' /etc/clamav/freshclam.conf
	/usr/bin/freshclam --datadir=/tmp/clamav/ | $progreso --progress-text="Actualizando base de firmas de virus, por favor espere..." --title="Actualizando"
	mv -f /tmp/clamav/*.cvd /root/.clamtk/db/
	sed -i 's_Update=single_Update=shared_g' /root/.clamtk/prefs
	clamtk
}


function borrar_1 () {
	cat /dev/zero > "$borrar"
	cat /dev/urandom > "$borrar"
	shred -fz -n 5 "$borrar"
}

function borrar_2 () {
	cat /dev/zero > "$borrar"
	cat /dev/urandom > "$borrar"
}

function borrar_3 () {
	cat /dev/zero > "$borrar"
}


# esta funcion seguramente esta duplicada
function mensaje () {
	$final --text="Borrado finalizado."
}

function xfillzero () {
	if yad --skip-taskbar --fixed --center --text-align=fill --borders=6 --title="NOTIFICACION" --text="Este programa le permitira borrar de forma segura toda la informacion de un dispositivo externo. Para borrar el disco duro local utilice el script DESTRUIR"; then
		borrar=$(fdisk -l | grep "Disco" | sed '/zram/d' | sed '/loop/d' | awk '{print $2}' | sed 's/.$//g' | yad --center --no-click --list --title="Lista de dispositivos" --text="Seleccione el dispositivo que desea borrar." --separator="" --column 'Dispositivo' --height 380 --width 150 --button="ACEPTAR":0)

		if [[ -z "$borrar" ]]; then
			yad --center --window-icon=error --title=Error --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe escoger un dispositivo."
			if [[ $? = 0 ]]; then
				source $0
			else
				exit 1
			fi
		fi

		modo=$(yad --sticky --fixed --center --width=360 --height=450 --window-icon=/usr/share/icons/post-install.png --text="Seleccione el modo de borrado para el dispositivo" --no-click --list --title="Tipo de borrado" --column=Acciones "Seguro: zero, urandom, shred" "Medio: zero, urandom" "Rapido: zero")

		if [ "$modo" = "Seguro: zero, urandom, shred|" ]; then
			yad --center --window-icon=error --title=Advertencia --button="Continuar":0 --button="Salir":1 --text="¿Esta seguro de continuar? Esta operacion no podra revertirse."
			if [[ $? = 0 ]]; then
				borrar_1 | $progreso --title="Borrando" --progress-text="Borrando el disco, esto proceso puede tomar varias horas, por favor espere."
				mensaje
			else
				exit 1
			fi

		elif [ "$modo" = "Medio: zero, urandom|" ]; then
			yad --center --window-icon=error --title=Advertencia --button="Continuar":0 --button="Salir":1 --text="¿Esta seguro de continuar? Esta operacion no podra revertirse."
			if [[ $? = 0 ]]; then
				borrar_2 | $progreso --title="Borrando" --progress-text="Borrando el disco, esto proceso puede tomar varias horas, por favor espere."
				mensaje
			else
				exit 1
			fi	

		elif [ "$modo" = "Rapido: zero|" ]; then
			yad --center --window-icon=error --title=Advertencia --button="Continuar":0 --button="Salir":1 --text="¿Esta seguro de continuar? Esta operacion no podra revertirse."
			if [[ $? = 0 ]]; then
				borrar_3 | $progreso --title="Borrando" --progress-text="Borrando el disco, esto proceso puede tomar varias horas, por favor espere."
				mensaje
			else
				exit 1
			fi

		else
			echo 1 > /dev/null
		fi
	else
		echo 1 > /dev/null
	fi
}

function xpersistencia () {
	if ! [[ -d /lib/live/mount/rootfs ]]; then
		"$errores" --text="Este programa no puede ejecutarse desde una instalacion en un disco duro."
		exit 1
	fi

	donde="/mnt/miusb"
	$miyad --timeout=5 --title="Notificacion" --text="Este procedimiento activara la persistencia para el directorio /home; La memoria usb solo debe contener la particion del sistema operativo."
	dispositivo=$(fdisk -l | grep "Disco" | grep -v "loop" | grep -v "zram" | awk '{print $2}' | sed 's/.$//g' | yad --center --no-click --list --title="Seleccione dispositivo" --text="Seleccione el dispositivo donde copio el contenido de la imagen iso." --separator="" --column 'Dispositivo' --height 380 --width 150 --button="ACEPTAR":0)
	if [[ -z "$dispositivo" ]]; then
		$errores --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe seleccionar un dispositivo."
		if [[ $? = 0 ]]; then
			source $0
		else
			exit 0
		fi
	fi
	dispositivo2=$(echo $dispositivo"1")
	primero=$(fdisk -l | grep "$dispositivo2" | awk '{print $4}' | grep -v "GiB,")
	segundo=$(($primero+1))
	parted -a optimal -s "$dispositivo" -- mkpart primary ext4 $(echo $segundo"s") 100%
	dispositivo3=$(fdisk -l | grep "$dispositivo" | grep -v "loop" | grep -v "zram" | grep -v "Disco" | grep -v "Hidden" | awk '{print $1}' | grep -v "$dispositivo2")
	mkfs.ext4 -FFL persistence "$dispositivo3"
	mkdir -p "$donde"
	mount -t ext4 "$dispositivo3" "$donde"
	echo "/home bind" > "$donde"/persistence.conf
	umount -fl "$donde"
	$final --text="Reinicie su sistema para activar la persistencia."
	lxde-logout
}

function xmyrf () {
	case "$1" in
		apagartodo)
			rfkill block all
			;;

		encendertodo)
			rfkill unblock all
			;;

		resetear)
			rfkill block all
			rfkill unblock all
			;;

		*)
	            	echo "uso: $(basename $0) opciones"
			echo "apagartodo		Apaga todos los dispositivos inalambricos"
			echo "encendertodo		Enciende todos los dispositivos inalambricos"
			echo "resetear			Resetea todos los dispositivos inalambricos"
			;;

	esac
}

function xpassgen () {
	if [[ -z $1 ]]; then
		< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c 8;echo;
	else
		< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c "$1";echo;
	fi
}

function xreparaciones () {
	case "$1" in
		firewall)
			iptables_clean
			;;

		limpieza)
			limpiar_1
			;;

		firefox)
			rm -rf /home/*/.mozilla/*
			;;

		paquetes)
			rm -f /var/lib/dpkg/lock
			rm -f /var/cache/apt/archives/lock
			apt -q update
			apt-get -y install
			apt-get -y autoremove
			apt -y purge $(deborphan)
			dpkg --configure -a
			;;

		xfce)
			xfce4-panel --quit
			pkill xfconfd
			rm -rf $HOME/.cache/sessions
			rm -rf $HOME/.config/xfce4
			xfce4-panel
			;;

		mate)
			gconftool-2 –shutdown
			pkill mate-panel
			rm -rf $HOME/.gconf/apps/panel
			reboot
			;;

		cinnamon)
			gsettings reset-recursively org.cinnamon
			cinnamon --replace
			cinnamon r
	 		;;

		lxde)
			rm -r $HOME/.config/lxpanel
			lxpanelctl restart
			;;
		
		locales)	
			apt-get install --reinstall locales
			dpkg-reconfigure locales
			;;
		
		openbox)
			openbox --reconfigure
			openbox --restart
			;;
		
		gnome)
			gconftool-2 --recursive-unset /apps/panel
			rm -rf $HOME/.gconf/apps/panel
			pkill gnome-panel
			;;
	
		reinstall)	
			dpkg-reconfigure -phigh -a 
			;;

		*)
	            	echo "USO: $(basename $0) {cinnamon|firefox|firewall|gnome|limpieza|locales|lxde|mate|openbox|paquetes|reinstall|xfce}"
			;;

	esac
}

function xrepdisk () {
	case "$1" in
		badblocks)
			badblocks -svnf -o $HOME/badblocks.log $2
			;;

		e2fsck)
			e2fsck -vypf $2
			;;

		fsck.ext4)
			fsck.ext4 -cDfty -C 0 $2
			;;

		*)
	            	echo "USO: $(basename $0) {badblocks|e2fsck|fsck.ext4} /dev/sdx"
			;;

esac
}

function xserver () {
# No se debe ejecutar en modo live
	case "$1" in
		minimal)
			optimizacion_1
			$insta xanadu-headless
			apt -y autoremove
			apt -y purge $(deborphan --libdevel) $(deborphan --find-config) $(deborphan)
			limpiar_1
			;;

		office)
			optimizacion_1
			$insta xanadu-sfw
			limpiar_1
			;;

		*)
			echo "Este script adapta una instalacion de Xanadu GNU/Linux para hacerla"
			echo "apta para su uso en oficinas o en entornos headless..."
			echo "USO: $(basename $0) {minimal|office}"
			;;
esac
}

function aide_on () {
	aideinit -y -f
	mv -f -v /var/lib/aide/aide.db.new /var/lib/aide/aide.db
}

function psad_on () {
	systemctl enable psad
	sed -i 's_HOSTNAME                    xanadu;_'HOSTNAME                    $(hostname);'_g' /etc/psad/psad.conf
	systemctl start psad
	psad --sig-update
	psad -H
}

function fail_on () {
	systemctl enable fail2ban
	systemctl start fail2ban
}

function ntp_on () {
	systemctl enable ntp
	systemctl start ntp
}
function psad_off () {
	systemctl disable psad
	systemctl stop psad
}

function fail_off () {
	systemctl disable fail2ban
	systemctl stop fail2ban
}

function ntp_off () {
	systemctl disable ntp
	systemctl stop ntp
}

function xsegoff () {
	opts=$(yad --window-icon=/usr/share/icons/lock-close.png --center --list --title="Desactivar elementos de seguridad" --text="Marque las opciones que usted quiere desactivar." --checklist --column "Marque" --column "Num" --column "Opcion" --width=590 --height=525 --button="Aceptar":0 --button="Salir":1\
  FALSE 01 "Desctivar Fail2ban" \
  FALSE 02 "Desctivar PSAD" \
  FALSE 03 "Desctivar NTP" \
  TRUE 04 "Desctivar todos")

	if [[ $? = 1 ]]; then
		exit 0
	fi

	if $(echo $opts | grep -q 01); then
		fail_off
	fi

	if $(echo $opts | grep -q 02); then
		psad_off
	fi

	if $(echo $opts | grep -q 03); then
		ntp_off
	fi

	if $(echo $opts | grep -q 04); then
		psad_off
		fail_off
		ntp_off
	fi

	$advertencia --window-icon=/usr/share/icons/lock-close.png --timeout=7 --text="Finalizado"
}

function xsegon () {
	opts=$(yad --window-icon=/usr/share/icons/lock-close.png --center --list --title="Activar elementos de seguridad" --text="Marque las opciones que usted quiere activar. Los servicios se activaran con sus configuraciones por defecto es necesario que el usuario las modifique de acuerdo a sus necesidades." --checklist --column "Marque" --column "Num" --column "Opcion" --width=590 --height=525 --button="Aceptar":0 --button="Salir":1\
  FALSE 01 "Activar AIDE" \
  FALSE 02 "Activar Fail2ban" \
  FALSE 03 "Activar PSAD" \
  FALSE 04 "Activar NTP" \
  TRUE 05 "Activar todos")

	if [[ $? = 1 ]]; then
		exit 0
	fi

	if $(echo $opts | grep -q 01); then 
		aide_on
	fi

	if $(echo $opts | grep -q 02); then
		fail_on
	fi

	if $(echo $opts | grep -q 03); then
		psad_on
	fi

	if $(echo $opts | grep -q 04); then
		ntp_on
	fi

	if $(echo $opts | grep -q 05); then
		aide_on
		psad_on
		fail_on
		ntp_on
	fi

	$advertencia --window-icon=/usr/share/icons/lock-close.png --timeout=7 --text="Finalizado"
}



function limpiardd_1 () {
	for i in $(fdisk -l "$disco" | grep "/dev" | grep -v "Disco" | awk '{print $1}'); do
		umount -f $i
		e2fsck -yf $i
	done
}

function midd_1 () {
	usb2=$(echo $usb"1")
	umount -f "$usb2"
	mkdir -p /media/usb
	mount -t auto "$usb2" /media/usb
	dd if="$disco" of=/media/usb/imagen.raw
	md5sum -b /media/usb/imagen.raw /media/usb/imagen.md5
	umount -f /media/usb
}


function xddclone () {

disco=$(fdisk -l | grep "Disco" | awk '{print $2}' | sed 's/.$//g' | yad --center --no-click --list --title="Disco" --text="Seleccione el disco que desea clonar." --separator="" --column 'Dispositivo' --height 380 --width 150 --button="ACEPTAR":0)
if [[ -z "$disco" ]]; then
	yad --center --window-icon=error --title="Error" --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe escoger un disco."
	if [[ $? = 0 ]]; then
		source $0
	else
		exit 1
	fi
fi

usb=$(fdisk -l | grep "Disco" | grep -v "loop" | grep -v "zram" | awk '{print $2}' | sed 's/.$//g' | yad --center --no-click --list --title="Seleccione dispositivo" --text="Seleccione el dispositivo donde copiara la imagen del disco." --separator="" --column 'Dispositivo' --height 380 --width 150 --button="ACEPTAR":0)
if [[ -z "$usb" ]]; then
	yad --center --window-icon=error --title="Error" --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe escoger un dispositivo."
	if [[ $? = 0 ]]; then
		source $0
	else
		exit 1
	fi
fi

limpiardd_1 | "$progreso" --progress-text="Revisando el disco, esto proceso puede tomar varios minutos, por favor espere" --title="Revision"
midd_1 | "$progreso" --progress-text="Creando la imagen del disco, esto proceso puede tomar varias horas, por favor espere" --title="Creando Imagen"

"$final" --text="El proceso de creacion de la imagen de disco se ha finalizado."
}

function xswapfilescan () {

yad --center --text-align=fill --borders=6 --title="Swapfile Scan" --button="Crear archivo swap":0 --button="Buscar archivos swap":1 --button="Seleccionar la ubicacion del archivo swap":2 --button="Salir":3 --text="Seleccione la accion que desea realizar"

mode="$?"

case $mode in
	0)
		$advertencia --text="Seleccione la carpeta donde desea crear el archivo swap."
		ubicacion=$(yad --file-selection --height 380 --width 500)
		if [[ -z "$ubicacion" ]]; then
			$errores --button="Ir atras":0 --button="Salir":1 --text="No selecciono nada. Debe seleccionar una carpeta."
			if [[ $? = 0 ]]; then
				source $0
			else
				exit 0
			fi
		fi
		peso=$(yad --width=400 --center --text-align=fill --borders=6 --title="Swapfile Scan" --text="Introduzca la cantidad en Megabytes que desea asignar al archivo swap" --form --field="cantidad" --button="Aceptar":0 | sed 's/.$//g')
		if [[ -z "$peso" ]]; then
			$errores --button="Ir atras":0 --button="Salir":1 --text="No introdujo una cantidad."
			if [[ $? = 0 ]]; then
				source /usr/bin/swapfilescan
			else
				exit 0
			fi
		fi
		dd if=/dev/zero of="$ubicacion"/swapfile.swp bs=1M count=$peso
		chown root:root "$ubicacion"/swapfile.swp
		chmod 0600 "$ubicacion"/swapfile.swp
		mkswap "$ubicacion"/swapfile.swp
		$final --text="Finalizado."
		;;

	1)
		contar=0
		for i in $(find /media/user/ -type f -name "swapfile.swp"); do
			let contar=$(($contar+1))
			losetup /dev/loop$contar $i
			mkswap /dev/loop$contar
			swapon -p 30 -f /dev/loop$contar
		done
		$final --text="Finalizado."
		;;

	2)
		dispositivo3=(yad --file-selection --height 380 --width 500)
		losetup /dev/loop9 $dispositivo3
		mkswap /dev/loop9
		swapon -p 30 -f /dev/loop9
		$final --text="Finalizado."
		;;

	3)
		exit 0
		;;

esac

}

function routeroff () {

if [[ -f "$lock3" ]]; then
	source /etc/xanadurouter.conf
	killall hostapd
	echo "Se detiene el proceso hostapd" >> "$lock3"
	rm -f /run/hostapd.pid
	ifdown "$red1"
	ifdown "$red2"
	echo "Se detienen las interfaces de red" >> "$lock3"
	mv -f /etc/network/if-pre-up.d/linux-wlan-ng-pre-up.old /etc/network/if-pre-up.d/linux-wlan-ng-pre-up
	tor_0
	macchanger -p "$red1"
	echo "Se restaura la mac" >> "$lock3"
	cp -f /etc/network/interfaces.old /etc/network/interfaces
	cp -f /etc/hostapd/hostapd.conf.ori /etc/hostapd/hostapd.conf
	cp -f /etc/dnsmasq.conf.ori /etc/dnsmasq.conf
	echo "Se restauran las configuraciones de interfaces, hostapd y dnsmasq" >> "$lock3"
	echo "Se limpian las reglas de iptables " >> "$lock3"
	rmmod -f ip_tables ip_conntrack iptable_filter iptable_nat ipt_physdev act_police
	service network-manager start
	echo "Se reinicia network-manager" >> "$lock3"
	rm -f "$lock3"
	$final --window-icon=/usr/share/icons/wifi-off.png --text="Servicio finalizado exitosamente."
else
	$errores --window-icon=/usr/share/icons/wifi-off.png --text="El Router WiFi Tor no se esta ejecutando."
fi

}



function routeron () {

if [[ -f "$lock3" ]]; then
	$errores --window-icon=/usr/share/icons/wifi-on.png --timeout=30 --text="El Router WiFi Tor ya se esta ejecutando con los siguientes parametros: SSID: $(grep -n 'ssid=' /etc/hostapd/hostapd.conf | grep 6 | cut -c 8-18)\nPassword: $(grep 'wpa_passphrase' /etc/hostapd/hostapd.conf | cut -c 16-26)"
else
	yad --window-icon=/usr/share/icons/wifi-on.png --skip-taskbar --fixed --center --text-align=fill --borders=6 --button=Aceptar:0 --button=Cancelar:1 --title="ADVERTENCIA" --text="Esta funcion es EXPERIMENTAL, puede cambiar algunos parametros del router en /etc/xanadurouter.conf. Se recomienda no usar la pc durante la ejecucion del router wifi, presione aceptar para continuar."
	if [[ $? = 0 ]]; then
		echo "Comienza el arranque del router tor" > "$lock3"
		source /etc/xanadurouter.conf
		cp -f /etc/network/interfaces /etc/network/interfaces.old
		cp -f /etc/network/interfaces.ori /etc/network/interfaces
		cp -f /etc/dnsmasq.conf.ori /etc/dnsmasq.conf
		cp -f /etc/hostapd/hostapd.conf.ori /etc/hostapd/hostapd.conf
		echo "Se copian las configuraciones de interfaces, dnsmasq y hostapd" >> "$lock3"
		service network-manager stop
		echo "Se detiene el servicio network-manager" >> "$lock3"
		macchanger -r "$red1"
		echo "Se cambia la mac de la tarjeta de red" >> "$lock3"
		echo -e "\nauto" $red1 >> /etc/network/interfaces
		echo "iface" $red1 "inet dhcp" >> /etc/network/interfaces
		echo -e "\nauto" $red2 >> /etc/network/interfaces
		echo "allow-hotplug" $red2 >> /etc/network/interfaces
		echo "iface" $red2 "inet static" >> /etc/network/interfaces
		echo "address 192.168.10.1" >> /etc/network/interfaces
		echo "netmask 255.255.255.0" >> /etc/network/interfaces
		mv -f /etc/network/if-pre-up.d/linux-wlan-ng-pre-up /etc/network/if-pre-up.d/linux-wlan-ng-pre-up.old
		echo "Se cambia las configuraciones de la red" >> "$lock3"
		ifup "$red1"
		ifup "$red2"
		echo "Se inician las interfaces de red" >> "$lock3"
		echo "interface="$red2 >> /etc/dnsmasq.conf
		echo "except-interface="$red1 >> /etc/dnsmasq.conf
		echo "listen-address=192.168.10.1" >> /etc/dnsmasq.conf
		echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
		echo "dhcp-range=192.168.10.50,192.168.10.150,255.255.255.0,12h" >> /etc/dnsmasq.conf
		echo "dhcp-host=AB:CD:EF:FF:11:22,net:known" >> /etc/dnsmasq.conf
		#echo "dhcp-ignore=tag:!known" >> /etc/dnsmasq.conf
		echo "Se agregan configuraciones adicionales a dnsmasq" >> "$lock3"
		tor_1
		espera
		echo "Se ejecuta la funcion espera" >> "$lock3"
		sed -i 's_xanadu_'$(date | md5sum | cut -c 1-10)'_g' /etc/hostapd/hostapd.conf
		sed -i 's_1234567890_'$(date | md5sum | cut -c 1-10)'_g' /etc/hostapd/hostapd.conf
		hostapd -B /etc/hostapd/hostapd.conf -P /run/hostapd.pid
		echo "Se cambia la configuracion de hostapd" >> "$lock3"
		modprobe -f ip_tables ip_conntrack iptable_filter iptable_nat ipt_physdev act_police
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 1:21 --syn -j REDIRECT --to-ports $TOR_PORT
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 23:79 --syn -j REDIRECT --to-ports $TOR_PORT
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 80 --syn -j REDIRECT --to-ports 8118
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 81:442 --syn -j REDIRECT --to-ports $TOR_PORT
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 443 --syn -j REDIRECT --to-ports 8118
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 444:5900 --syn -j REDIRECT --to-ports $TOR_PORT
		iptables -t nat -A PREROUTING -i "$red2" -p tcp --dport 5902:65535 --syn -j REDIRECT --to-ports $TOR_PORT
		echo "Se agregan reglas a iptables" >> "$lock3"
		$advertencia --window-icon=/usr/share/icons/wifi-on.png --timeout=30 --text="SSID: $(grep -n 'ssid=' /etc/hostapd/hostapd.conf | grep 6 | cut -c 8-18)\nPassword: $(grep 'wpa_passphrase' /etc/hostapd/hostapd.conf | cut -c 16-26)"
	else
		exit 0
	fi
fi

}

lxterminal -e sudo -u debian-tor arm

# agregar swapfilescan

# acomodar la funcion fillzero

# acomodar la funcion mi persistencia

# acomodar la funcion reparaciones y repdisk

# hacer interfaz de myrf

# acomodar la funcion myrf

# hacer interfaz de clamav

# fusionar passgen

# agregar reparaciones

# agregar repdisk

# agregar modo-server

# agregar la funsion para ver que se esta ejecutando en seguridad

# detectar tor por el pid

# revisar si hay conexion para activar post-instalador

# hacer que yad escriba su pid en run mediante variable YAD_PID

# revisar que es kill-parent en yad

# ver opciones de splash en yad

# agregar mas opciones al parametro tab

if ! [[ -d /lib/live/mount/rootfs ]]; then
	$mitab --tabnum=1 --text-align=center --text="$bienvenida" --image-on-top --image="/usr/share/images/desktop-base/logo1.png" &\
	$mitab --tabnum=2 --separator='\n' --text="$textoadicionales" --list --column="Acciones" "$ad1" "$ad2" "$ad3" "$ad4" "$ad5" "$ad6" "$ad7" "$ad8" &> /tmp/xan1 &\
	$mitab --tabnum=3 --separator='\n' --text="$textopost" --list --column="Acciones" "$pos1" "$pos2" "$pos3" "$pos4" "$pos5" "$pos6" "$pos7" "$pos8" "$pos9" "$pos10" "$pos11" "$pos12" "$pos13" "$pos14" &> /tmp/xan2 &\
	$mitab --tabnum=4 --separator='\n' --text="$textoseguridad" --list --checklist --column="Marque" --column="Num" --column="Opcion" FALSE 01 "$seg1" FALSE 02 "$seg2" FALSE 03 "$seg3" FALSE 04 "$seg4" FALSE 05 "$seg5" &> /tmp/xan3 &\
	$mitab --tabnum=5 --text="$textotor" &> /tmp/xan4 &\
	$mitab --tabnum=6 --text="$wifitor" &> /tmp/xan5 &\
	$mimain --on-top --window-icon=/usr/share/icons/post-install.png --tab="$pest1" --tab="$pest2" --tab="Post-install" --tab="$pest3" --tab="$pest4" --tab="$pest5" --text="$textomain"
else
	$mitab --tabnum=1 --text="$bienvenida"  &\
	$mitab --tabnum=2 --separator='\n' --text="$textoadicionales" --list --column="Acciones" "$ad1" "$ad2" "$ad3" "$ad4" "$ad5" "$ad6" "$ad7" "$ad8" &> /tmp/xan1 &\
	$mitab --tabnum=3 --separator='\n' --text="$textoseguridad" --list --checklist --column="Marque" --column="Num" --column="Opcion" FALSE 01 "$seg1" FALSE 02 "$seg2" FALSE 03 "$seg3" FALSE 04 "$seg4" FALSE 05 "$seg5" &> /tmp/xan3 &\
	$mitab --tabnum=4 --text="$textotor" &> /tmp/xan4 &\
	$mitab --tabnum=5 --text="$wifitor" &> /tmp/xan5 &\
	$mimain --tab="$pest1" --tab="$pest2" --tab="$pest3" --tab="$pest4" --tab="$pest5" --text="$textomain"
fi

xan1=$(cat /tmp/xan1)
xan2=$(cat /tmp/xan2)
xan3=$(cat /tmp/xan3)
xan4=$(cat /tmp/xan4)
xan5=$(cat /tmp/xan5)

if [ "$xan1" = "$ad2" ]; then
	zenity --text-info --title="Persistencia" --filename=$persistencia
	if [[ $? == 0 ]] ; then
		echo 1 > /dev/null
	else
		exit 0
	fi

elif [ "$xan1" = "$ad3" ]; then
	xpersistencia

elif [ "$xan1" = "$ad4" ]; then
	$advertencia --text="Esta opción tratara de reparar la forma en la que se muestra la hora en su ordenador."
	hwclock --systohc
	systemctl restart ntp

elif [ "$xan1" = "$ad6" ]; then
	$advertencia --text="Esta opción activara el gestor de composición compton aumentando dramáticamente el consumo de recursos en su equipo."
	/usr/bin/compton --config /etc/compton.conf -b
	
elif [ "$xan1" = "$ad7" ]; then
	killall compton
	$final --text="Compton se ha detenido."

elif [ "$xan1" = "$ad1" ]; then
	gufw

elif [ "$xan1" = "$ad5" ]; then
	xfillzero

elif [ "$xan1" = "$ad8" ]; then
	xddclone
else
	echo 1 > /dev/null
fi

if [ "$xan2" = "$pos2" ]; then
	if (( $memoria > 2048000 )); then	
		$update
		$insta xanadu-kde | progress_2
		limpiar_1 | progress_limpiar_2
	else
		$errores $cantidadram
	fi

elif [ "$xan2" = "$pos3" ]; then
	if (( $memoria > 2048000 )); then
		$update
		$insta xanadu-gnome | progress_2
		limpiar_1 | progress_limpiar_2
	else
		$errores $cantidadram
	fi

elif [ "$xan2" = "$pos4" ]; then
	$update
	$insta xanadu-xfce | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos5" ]; then
	$update
	$insta xanadu-enlightenment | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos6" ]; then
	if (( $memoria > 2048000 )); then
		$update
		$insta xanadu-accessibility | progress_2
		limpiar_1 | progress_limpiar_2
	else
		$errores $cantidadram
	fi

elif [ "$xan2" = "$pos7" ]; then
	if (( $memoria > 2048000 )); then
		$update
		$insta playonlinux | progress_2
		limpiar_1 | progress_limpiar_2
	else
		$errores $cantidadram
	fi

elif [ "$xan2" = "$pos8" ]; then
	$update
	$insta fglrx-atieventsd fglrx-control fglrx-driver fglrx-modules-dkms radeontool | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos9" ]; then
	$update
	$insta nvclock nvidia-alternative nvidia-glx nvidia-installer-cleanup nvidia-kernel-common nvidia-kernel-dkms nvidia-settings nvidia-support nvidia-vdpau-driver nvidia-detect nvidia-xconfig | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos10" ]; then
	$update
	$insta xanadu-low | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos11" ]; then
	headers_1 | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos1" ]; then
	apparmor_1 | progress_2
	if [[ $(lscpu | grep ID | awk '{print $4}') = GenuineIntel ]];then
		$insta thermald
	fi
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos12" ]; then
	$update
	$insta hplip-gui | progress_2
	limpiar_1 | progress_limpiar_2

elif [ "$xan2" = "$pos13" ]; then
	if $advertencia --text="Este software solo debe ser instalado en una laptop ¿desea continuar?"; then
		$update
		$insta laptop-mode-tools | progress_2
		systemctl enable laptop-mode
		limpiar_1 | progress_limpiar_2
	else
		source $0
	fi

elif [ "$xan2" = "$pos14" ]; then
	xterm -e /usr/bin/actualizar
else
	echo 1 > /dev/null
fi

exit 0
